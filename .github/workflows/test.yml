name: üß™ Test

env:
  # MINIMUM_VERSION: The minimum version to test.
  MINIMUM_VERSION: 2021.3
  # ADDITIONAL_VERSIONS: The additional versions.
  ADDITIONAL_VERSIONS: '[]'
  # EXCLUDE_FILTER: The excluded versions.
  EXCLUDE_FILTER: '(2022.1|2022.2|2023.1|2023.2|2023.3)'

on:
  workflow_dispatch:
    inputs:
      versions:
        description: 'The versions to test. If empty, the latest patch for each minor version is automatically fetched. (e.g. ["2021.3.0f1", "2022.3.0f1", "6000.0.2f1"])'
        required: false
        default: ''
      modules:
        description: 'The modules to test.If empty, all modules are tested. (e.g. ["base", "linux-il2cpp", "windows-mono", "mac-mono", "ios", "android", "webgl"])'
        required: false
        default: '["base", "linux-il2cpp", "windows-mono", "mac-mono", "ios", "android", "webgl"]'
  push:
    branches:
      develop
    paths:
      - "**/Dockerfile"
      - ".github/workflows/test.yml"
      - "reference-project/**"
  pull_request:
    paths:
      - "**/Dockerfile"
      - ".github/workflows/test.yml"
      - "reference-project/**"

jobs:
  ###########################
  #    Build base and hub   #
  ###########################
  base-and-hub:
    name: üõ†Ô∏è Build base and hub images
    runs-on: ubuntu-latest
    outputs:
      versions: ${{ steps.setup.outputs.versions }}
      modules: ${{ steps.setup.outputs.modules }}
    steps:
      ###########################
      #          Setup          #
      ###########################
      - name: üöö Checkout
        uses: actions/checkout@v4
      - name: ‚öôÔ∏è Setup QEMU
        uses: docker/setup-qemu-action@v3
      - name: ‚öôÔ∏è Setup Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver: docker

      ###########################
      #   Build base and hub    #
      ###########################
      - name: üõ†Ô∏è Build image (unity3d_base:local)
        uses: docker/build-push-action@v6
        with:
          context: .
          file: base/Dockerfile
          tags: unity3d_base:local
          push: false
      - name: üõ†Ô∏è Build image (unity3d_hub:local)
        uses: docker/build-push-action@v6
        with:
          context: .
          file: hub/Dockerfile
          build-args: baseImage=unity3d_base:local
          tags: unity3d_hub:local
          push: false

      ###########################
      #   Save images for next  #
      ###########################
      - name: üíæ Save images for next
        run: |
          docker images
          docker save -o base-and-hub.tar unity3d_base:local unity3d_hub:local
      - name: üì¶ Upload base and hub images for next
        uses: actions/upload-artifact@v4
        with:
          name: base-and-hub
          path: base-and-hub.tar
          retention-days: 1

      ###########################
      #    Setup build matrix   #
      ###########################
      - name: ‚öôÔ∏è Setup build matrix
        id: setup
        run: |
          echo "MINIMUM_VERSION=${MINIMUM_VERSION}" | tee -a $GITHUB_STEP_SUMMARY
          echo "ADDITIONAL_VERSIONS=${ADDITIONAL_VERSIONS}" | tee -a $GITHUB_STEP_SUMMARY
          echo "INPUT_VERSIONS="'${{ inputs.versions }}' | tee -a $GITHUB_STEP_SUMMARY

          VERSIONS='${{ inputs.versions }}'
          if [ -z "${VERSIONS}" ]; then
            LATEST_VERSIONS=`npx --yes unity-changeset list --versions --latest-patch --min ${MINIMUM_VERSION} --json --all`
            VERSIONS=`echo "[${LATEST_VERSIONS}, ${ADDITIONAL_VERSIONS}]" \
              | jq -c '[ flatten | sort | unique | .[] | select( test("${{ env.EXCLUDE_FILTER }}") | not ) ]'`
          fi

          MODULES='${{ inputs.modules }}'
          if [ -z "${MODULES}" ]; then
            MODULES='["base", "linux-il2cpp", "windows-mono", "mac-mono", "ios", "android", "webgl"]'
          fi

          echo "versions=${VERSIONS}" | tee -a $GITHUB_OUTPUT $GITHUB_STEP_SUMMARY
          echo "modules=${MODULES}" | tee -a $GITHUB_OUTPUT $GITHUB_STEP_SUMMARY

  ###########################
  #  Build editor and test  #
  ###########################
  editor:
    needs: base-and-hub
    name: üß™ Test editor (${{ matrix.version }}-${{ matrix.module }})
    runs-on: ubuntu-latest
    env:
      UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
      UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
      UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
    strategy:
      fail-fast: false
      max-parallel: 4
      matrix:
        # The latest patch versions for each minor version.
        version: ${{ fromJson(needs.base-and-hub.outputs.versions) }}
        module: ${{ fromJson(needs.base-and-hub.outputs.modules) }}

    steps:
      ###########################
      #          Setup          #
      ###########################
      - name: üöö Checkout
        uses: actions/checkout@v4
      - name: ‚öôÔ∏è Setup QEMU
        uses: docker/setup-qemu-action@v3
      - name: ‚öôÔ∏è Setup Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver: docker

      - name: üßπ Free disk space (Phase 1)
        uses: jlumbroso/free-disk-space@main
        with:
          tool-cache: false
          android: true
          dotnet: true
          haskell: true
          large-packages: true
          docker-images: true
          swap-storage: true

      - name: üßπ Free disk space (Phase 2)
        run: .github/workflows/scripts/free_disk_space.sh

      ###########################
      #   Restore base and hub  #
      ###########################
      - name: üì• Download artifact
        uses: actions/download-artifact@v4
        with:
          name: base-and-hub

      - name: üì• Restore base and hub
        run: |
          docker load -i base-and-hub.tar

      ###########################
      #      Setup to build     #
      ###########################
      - name: üîç Find changeSet for ${{ matrix.version }}
        id: changeSet
        run: echo "value=`npx --yes unity-changeset ${{ matrix.version }}`" | tee $GITHUB_OUTPUT

      - name: üîç Find target platform for ${{ matrix.module }}
        id: targetPlatform
        run: |
          case ${{ matrix.module }} in
            base|linux-il2cpp ) echo "value=StandaloneLinux64" | tee $GITHUB_OUTPUT;;
            windows-mono )      echo "value=StandaloneWindows" | tee $GITHUB_OUTPUT;;
            mac-mono )          echo "value=StandaloneOSX" | tee $GITHUB_OUTPUT;;
            ios )               echo "value=iOS" | tee $GITHUB_OUTPUT;;
            android )           echo "value=Android" | tee $GITHUB_OUTPUT;;
            webgl )             echo "value=WebGL" | tee $GITHUB_OUTPUT;;
            * )                 echo "value=StandaloneLinux64" | tee $GITHUB_OUTPUT;;
          esac

      ###########################
      #       Build editor      #
      ###########################
      - name: üõ†Ô∏è Build image (unity3d:local)
        # if: steps.build-1.outcome == 'failure'
        uses: docker/build-push-action@v6
        id: build-1
        continue-on-error: true
        timeout-minutes: 40
        with:
          context: .
          file: editor/Dockerfile
          build-args: |
            baseImage=unity3d_base:local
            hubImage=unity3d_hub:local
            version=${{ matrix.version }}
            changeSet=${{ steps.changeSet.outputs.value }}
            module=${{ matrix.module }}
          tags: unity3d:local
          push: false

      ###########################
      #   Build editor (retry)  #
      ###########################
      - name: üí§ Sleep for retry
        if: steps.build-1.outcome == 'failure'
        run: sleep 120

      - name: üõ†Ô∏è Build Image (unity3d:local, retry)
        if: steps.build-1.outcome == 'failure'
        uses: docker/build-push-action@v6
        id: build-2
        # continue-on-error: true
        timeout-minutes: 40
        with:
          context: .
          file: editor/Dockerfile
          build-args: |
            baseImage=unity3d_base:local
            hubImage=unity3d_hub:local
            version=${{ matrix.version }}
            changeSet=${{ steps.changeSet.outputs.value }}
            module=${{ matrix.module }}
          tags: unity3d:local
          push: false

      - name: üì• Cache library
        uses: actions/cache@v4
        with:
          path: reference-project/Library
          key: Library-${{ matrix.version }}-${{ matrix.module }}-${{ github.sha }}
          restore-keys: |
            Library-${{ matrix.version }}-${{ matrix.module }}-
            Library-${{ matrix.version }}-
            Library-

      ###########################
      #           Test          #
      ###########################
      - name: üß™ Run tests
        uses: game-ci/unity-test-runner@main
        timeout-minutes: 45
        with:
          unityVersion: ${{ matrix.version }}
          customImage: unity3d:local
          projectPath: reference-project
          customParameters: -nographics -buildTarget ${{ steps.targetPlatform.outputs.value }}

      ###########################
      # Validate Android Utils  #
      ###########################
      - name: üîç Validate Android Utils
        if: matrix.module == 'android'
        run: |
          docker run unity3d:local /bin/bash -c -l 'java -version && sdkmanager --version && sdkmanager --list'

      ###########################
      #          Build          #
      ###########################
      - name: ‚öôÔ∏è Setup (IL2CPP)
        if: matrix.module == 'linux-il2cpp'
        run: |
          sed -i -e 's/Standalone: 0$/Standalone: 1/' reference-project/ProjectSettings/ProjectSettings.asset

      - name: üõ†Ô∏è Build Unity Project ${{ matrix.module }}
        uses: game-ci/unity-builder@main
        timeout-minutes: 45
        with:
          unityVersion: ${{ matrix.version }}
          customImage: unity3d:local
          projectPath: reference-project
          targetPlatform: ${{ steps.targetPlatform.outputs.value }}
          allowDirtyBuild: true
          customParameters: -nographics

      ###########################
      #       Build (GZip)      #
      ###########################
      - name: ‚öôÔ∏è Setup (WebGL, GZip)
        if: matrix.module == 'webgl'
        run: |
          sed -i -e 's/webGLCompressionFormat: .*$/webGLCompressionFormat: 1/' reference-project/ProjectSettings/ProjectSettings.asset

      - name: üõ†Ô∏è Build Unity Project (WebGL, GZip)
        if: matrix.module == 'webgl'
        uses: game-ci/unity-builder@main
        timeout-minutes: 45
        with:
          unityVersion: ${{ matrix.version }}
          customImage: unity3d:local
          projectPath: reference-project
          targetPlatform: ${{ steps.targetPlatform.outputs.value }}
          allowDirtyBuild: true
          customParameters: -nographics

      ###########################
      #       Build (Brotli)      #
      ###########################
      - name: ‚öôÔ∏è Setup (WebGL, Brotli)
        if: matrix.module == 'webgl'
        run: |
          sed -i -e 's/webGLCompressionFormat: .*$/webGLCompressionFormat: 0/' reference-project/ProjectSettings/ProjectSettings.asset

      - name: üõ†Ô∏è Build Unity Project (WebGL, Brotli)
        if: matrix.module == 'webgl'
        uses: game-ci/unity-builder@main
        timeout-minutes: 45
        with:
          unityVersion: ${{ matrix.version }}
          customImage: unity3d:local
          projectPath: reference-project
          targetPlatform: ${{ steps.targetPlatform.outputs.value }}
          allowDirtyBuild: true
          customParameters: -nographics

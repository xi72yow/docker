# Build all images for latest release (serverless)
# ========================================================
#
# - Check out latest release and build `base` and `hub`.
#   - The existed image tag building will be skipped.
#   - Use `skopeo` to check for the existence of tags.
# - After `base` and `hub` images are built, the workflow to build the editor image will be dispatched on a per-module basis for readability.
#   * Build All (build base and hub)
#     * (dispatch) -> Build Editor (base, [2018.3.1f1, 2018.3.2f1, ...])
#     * (dispatch) -> Build Editor (linux-il2cpp, [2018.3.1f1, 2018.3.2f1, ...])
#     ...
#     * (dispatch) -> Build Editor (webgl, [2018.3.1f1, 2018.3.2f1, ...])
# - This workflow lists the available Unity versions without a versioning server.
#   - Use `unity-changeset` to get the available Unity versions.
#   - As workflow settings, you can specify the minimum Unity version and the excluded Unity versions/module.
# - The build workflows for a new release (in this repository) takes about a day.
#   - If no new build is needed, it will take about 5 minutes.
# - This workflow will run on release new version in this repository.
# - This workflow will run daily to build for new released Unity versions or to rebuild.
#   - If other build workflows ('Build All' or 'Build Editor') are in progress or queued, this workflow will be skipped.
#   - 'Build Editor' workflow may fail with a timeout or a docker error, but in most cases the rebuild will succeed.
#   - Use EXCLUDE_IMAGE_TAGS to ignore the specified Unity version/module combination.
#
# [Required secrets]
#   DOCKER_USERNAME:    Docker username to login
#   DOCKER_PASSWORD:    Docker password to login
#   GH_WORKFLOW_TOKEN:  Github parsonal access token to dispatch workflow
name: üõ†Ô∏è Build All

on:
  issue_comment:
    types: [created]
  workflow_dispatch:
  #schedule:
    #- cron: "0 0 * * *" # daily

jobs:
  build:
    if: github.event_name != 'issue_comment' || startsWith(github.event.comment.body, '/build-all')
    name: üõ†Ô∏è Build base and hub
    runs-on: ubuntu-latest
    permissions:
      contents: read
      actions: read
      packages: write
    outputs:
      tag: ${{ steps.latest.outputs.release }}
    steps:
      ###########################
      #        Setup env        #
      ###########################
      - name: üöö Checkout (${{ github.ref }})
        uses: actions/checkout@v4

      ###########################
      #  Check build workflows  #
      ###########################
      - name: üîç Check other build workflows
        run: |
          # Get in-progress or queued workflows.
          gh auth login --with-token < <(echo ${{ github.token }})
          RUNNING_WORKFLOWS=`gh api -X GET /repos/${{ github.repository }}/actions/runs | jq -c '[ .workflow_runs[] | select(.status | test("in_progress|queued")) | .path ]'`
          echo "======== Running Workflows ========"
          echo "$RUNNING_WORKFLOWS"

          # [ERROR] Any 'Build Editor' workflow is in progress.
          [ 0 -lt `echo $RUNNING_WORKFLOWS | jq '[ .[] | select ( . == ".github/workflows/build-editor.yml" ) ] | length'` ] && echo "::error::Any 'Build Editor' workflow is running." && exit 1 || :

          # [ERROR] Other 'Build All' workflow is in progress.
          [ 1 -lt `echo $RUNNING_WORKFLOWS | jq '[ .[] | select ( . == ".github/workflows/build-all.yml" ) ] | length'` ] && echo "::error::Other 'Build All' workflow is running." && exit 1 || :

      ###########################
      # Checkout latest release #
      ###########################
      - name: üîñ Find latest release
        uses: pozetroninc/github-action-get-latest-release@master
        id: latest
        with:
          repository: ${{ github.repository }}
          excludes: prerelease, draft
      - name: üöö Checkout (${{ steps.latest.outputs.release }})
        uses: actions/checkout@v4
        with:
          ref: ${{ steps.latest.outputs.release }}

      ###########################
      #          Setup          #
      ###########################
      - name: ‚öôÔ∏è Setup QEMU
        uses: docker/setup-qemu-action@v3
      - name: ‚öôÔ∏è Setup buildx
        uses: docker/setup-buildx-action@v3
      - name: üîë Login docker
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: mob-sakai
          password: ${{ github.token }}

      ###########################
      #        Build base       #
      ###########################
      - name: üîç (base) Check whether to build
        id: setup_base
        run: |
          [ -n "`skopeo list-tags docker://ghcr.io/mob-sakai/unity3d_base | jq -r '.Tags[]' | grep -x '${{ steps.latest.outputs.release }}' || :`" ] && echo "skip=true" | tee $GITHUB_OUTPUT || :
      - name: ‚öôÔ∏è (base) Setup metadata
        if: steps.setup_base.outputs.skip != 'true'
        uses: docker/metadata-action@v5
        id: base-meta
        with:
          images: ghcr.io/mob-sakai/unity3d_base
          labels: |
            org.opencontainers.image.vendor=${{ github.repository_owner }}
            org.opencontainers.image.documentation=${{ github.event.repository.html_url }}
          tags: type=semver,pattern={{raw}},value=${{ steps.latest.outputs.release }}
      - name: üõ†Ô∏è (base) Build and push
        if: steps.setup_base.outputs.skip != 'true'
        uses: docker/build-push-action@v6
        with:
          context: .
          file: base/Dockerfile
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache
          push: true
          labels: ${{ steps.base-meta.outputs.labels }}
          tags: ${{ steps.base-meta.outputs.tags }}

      ###########################
      #        Build hub        #
      ###########################
      - name: üîç (hub) Check whether to build
        id: setup_hub
        run: |
          [ -n "`skopeo list-tags docker://ghcr.io/mob-sakai/unity3d_hub | jq -r '.Tags[]' | grep -x '${{ steps.latest.outputs.release }}' || :`" ] && echo "skip=true" | tee $GITHUB_OUTPUT || :
      - name: ‚öôÔ∏è (hub) Setup metadata
        if: steps.setup_hub.outputs.skip != 'true'
        uses: docker/metadata-action@v5
        id: hub-meta
        with:
          images: ghcr.io/mob-sakai/unity3d_hub
          labels: |
            org.opencontainers.image.vendor=${{ github.repository_owner }}
            org.opencontainers.image.documentation=${{ github.event.repository.html_url }}
          tags: type=semver,pattern={{raw}},value=${{ steps.latest.outputs.release }}
      - name: üõ†Ô∏è (hub) Build and push
        if: steps.setup_hub.outputs.skip != 'true'
        uses: docker/build-push-action@v6
        with:
          context: .
          file: hub/Dockerfile
          build-args: |
            baseImage=ghcr.io/mob-sakai/unity3d_base:${{ steps.latest.outputs.release }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache
          push: true
          labels: ${{ steps.hub-meta.outputs.labels }}
          tags: ${{ steps.hub-meta.outputs.tags }}

  ###########################
  #  Dispatch build editor  #
  ###########################
  dispatch-build-eitor:
    name: üöÄ Dispatch 'Build Editor' (${{ matrix.module }})
    needs: build
    runs-on: ubuntu-latest
    permissions:
      actions: write
      contents: read
    env:
      tag: ${{ needs.build.outputs.tag }}
    strategy:
      fail-fast: false
      max-parallel: 1
      matrix:
        module:
          - base
          - linux-il2cpp
          - windows-mono
          - mac-mono
          - ios
          - android
          - webgl
    steps:
      ###########################
      #          Setup          #
      ###########################
      - name: üöö Checkout (${{ github.ref }})
        uses: actions/checkout@v4

      - name: ‚öôÔ∏è Get available Unity versions
        run: |
          MIN_VERSION=`cat .minimumUnityVersion`
          npx --yes unity-changeset@latest list --versions --min $MIN_VERSION --all | tee .availableUnityVersions

      - name: ‚öôÔ∏è Find exist tags
        run: |
          skopeo list-tags docker://ghcr.io/mob-sakai/unity3d | jq -r '.Tags[]' | grep -v '^ubuntu' | grep -e "-${{ matrix.module }}-${{ env.tag }}$" | tee .existTags || touch .existTags

      - name: ‚öôÔ∏è Setup ignored tags
        run: |
          cat .ignoreTags | tee -a .ignoreTags_tmp
          sed '/^$/d' .ignoreTags_tmp > .ignoreTags

      - name: ‚öôÔ∏è Setup Unity versions to build
        id: setup
        run: |
          UNITY_VERSIONS_TO_BUILD=`for version in $(cat .availableUnityVersions) ; do \
              [ -z "$(grep -x ${version}-${{ matrix.module }}-${{ env.tag }} .existTags)" ] \
              && [ -z "$(echo ${version}-${{ matrix.module }}-${{ env.tag }} | grep -f .ignoreTags)" ] \
              && echo "${version}" || : ; \
          done`

          if [ -z "${UNITY_VERSIONS_TO_BUILD}" ]; then
            echo "::warning::No versions to build."
            echo "skip=true" >> $GITHUB_OUTPUT
            exit 0
          fi

          echo "======== Output ========"
          VERSIONS_JSON=`echo "${UNITY_VERSIONS_TO_BUILD}" | head -n 100 | jq -R '.' | jq -s -c '.' | jq -R '.' || echo '[]'`
          echo "versions=${VERSIONS_JSON}" | tee $GITHUB_OUTPUT $GITHUB_STEP_SUMMARY

      ###########################
      #  Dispatch build editor  #
      ###########################
      - name: üöÄ Dispatch 'Build Editor'
        # If there is no version to be built, the build will be skipped.
        if: steps.setup.outputs.skip != 'true'
        uses: benc-uk/workflow-dispatch@v1
        with:
          workflow: build-editor.yml
          inputs: '{ "versions": ${{ steps.setup.outputs.versions }}, "module": "${{ matrix.module }}", "tag": "${{ env.tag }}", "push": "true" }'
          ref: ${{ github.ref }}
